package com.zooz.common.client.ecomm.beans.requests;import com.fasterxml.jackson.annotation.JsonIgnore;import com.fasterxml.jackson.annotation.JsonProperty;import com.fasterxml.jackson.core.type.TypeReference;import com.zooz.common.client.ecomm.beans.CustomerDetails;import com.zooz.common.client.ecomm.beans.RegisterDetails;import com.zooz.common.client.ecomm.beans.responses.GetTokenResponse;import com.zooz.common.client.ecomm.beans.server.response.ZoozServerResponse;import com.zooz.common.client.ecomm.control.CommonParameters;/** * This call opens a request to the Zooz server, using a secure channel, and returns a token that will * be used in the following commands according to the token type requested: * customerToken – the returned token will be valid only for adding payment method operations */public class GetTokenRequest extends AbstractZoozRequest {    /**     * Optional values: •	customerToken     */    @JsonProperty    private String tokenType;    /**     * register details of the payment.     */    @JsonProperty    private RegisterDetails registerDetails;    /**     * customer details of the payment.     */    @JsonProperty    private CustomerDetails customerDetails;    /**     * Instantiates a new Get token request.     *     * @param tokenType       Optional values: •	customerToken     * @param registerDetails register details of the payment.     * @param customerDetails customer details of the payment.     */    public GetTokenRequest(String tokenType, RegisterDetails registerDetails, CustomerDetails customerDetails) {        super(CommonParameters.getToken);        this.tokenType = tokenType;        this.registerDetails = registerDetails;        this.customerDetails = customerDetails;    }    /**     * Default constructor with the customerToken as tokenType     *     * @param registerDetails register details of the payment.     * @param customerDetails customer details of the payment.     */    public GetTokenRequest(RegisterDetails registerDetails, CustomerDetails customerDetails) {        this("customerToken", registerDetails, customerDetails);    }    /**     * Returns the register details of the payment.     *     * @return register details object.     */    public RegisterDetails getRegisterDetails() {        return registerDetails;    }    /**     * Sets the register details of the payment.     *     * @param registerDetails register details object.     */    public void setRegisterDetails(RegisterDetails registerDetails) {        this.registerDetails = registerDetails;    }    /**     * Returns the type pf the token     *     * @return the token type.     */    public String getTokenType() {        return tokenType;    }    /**     * Sets the token type.     *     * @param tokenType a zooz token type.     */    public void setTokenType(String tokenType) {        this.tokenType = tokenType;    }    /**     * Returns the customer details of the payment.     *     * @return customer details object.     */    public CustomerDetails getCustomerDetails() {        return customerDetails;    }    /**     * Sets the customer details of the payment.     *     * @param customerDetails customer details object.     */    public void setCustomerDetails(CustomerDetails customerDetails) {        this.customerDetails = customerDetails;    }    /**     * Used to return the response type corresponding to the request.     *     * @return the corresponding response type.     */    @Override    @JsonIgnore    public TypeReference<ZoozServerResponse<GetTokenResponse>> getResponseTypeReference() {        return new TypeReference<ZoozServerResponse<GetTokenResponse>>() {        };    }}